amcl:
  ros__parameters:
    use_sim_time: False
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    base_frame_id: "base_footprint"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 100.0
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "nav2_amcl::OmniMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    scan_topic: scan

bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_footprint
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20
    wait_for_service_timeout: 1000
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: False
    
bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 30.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.001
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.3
      movement_time_allowance: 10.0
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.05
    # MPPI parameters
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"

      # --- Core MPPI ---
      motion_model: "DiffDrive"
      controller_frequency: 20.0        # (inherited from node, keep for clarity)
      iteration_count: 1
      batch_size: 1000                   # 1000@50Hz or 2000@30Hz is typical; 1000@20Hz OK
      time_steps: 56
      model_dt: 0.05                     # 20 Hz -> 0.05s; horizon = 2.8s

      # --- Limits (diff) ---
      vx_max: 0.40
      vx_min: 0.00                       # no reverse (front sensors)
      wz_max: 1.0
      wz_min: -1.0
      ax_max: 3.0
      ax_min: -3.0
      az_max: 2.5

      # --- Sampling noise (exploration) ---
      vx_std: 0.20
      vy_std: 0.00                       # diff-drive
      wz_std: 0.18

      # --- Path handling / viz ---
      prune_distance: 1.0
      transform_tolerance: 0.1
      temperature: 0.2
      gamma: 0.015
      visualize: false
      reset_period: 1.0                  # Humble
      regenerate_noises: false

      TrajectoryVisualizer:
        trajectory_step: 5
        time_step: 3

      TrajectoryValidator:
        plugin: "mppi::DefaultOptimalTrajectoryValidator"
        collision_lookahead_time: 2.0
        consider_footprint: false

      # --- Critics (Humble names) ---
      critics: [
        "ConstraintCritic",
        "ObstaclesCritic",
        "CostCritic",
        "PathFollowCritic",
        "PathAlignCritic",
        "PathAngleCritic",
        "GoalCritic",
        "GoalAngleCritic",
        "PreferForwardCritic"
      ]

      ConstraintCritic:
        enabled: true
        cost_power: 1
        cost_weight: 4.0

      # Keep moving along the path (set thresholds ~= horizon: 56 * 0.05 = 2.8 m @ 1 m/pt path)
      PathFollowCritic:
        enabled: true
        cost_power: 1
        cost_weight: 12.0
        offset_from_furthest: 10
        threshold_to_consider: 2.8

      # Face & align to path (Navfn has no headings -> keep use_path_orientations false)
      PathAlignCritic:
        enabled: true
        cost_power: 1
        cost_weight: 18.0
        max_path_occupancy_ratio: 0.6
        trajectory_point_step: 1
        threshold_to_consider: 2.8
        offset_from_furthest: 14
        use_path_orientations: true

      PathAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 2.0
        offset_from_furthest: 18
        threshold_to_consider: 2.8
        max_angle_to_furthest: 0.5
        mode: 2

      GoalCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 2.8

      GoalAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 1.5
        threshold_to_consider: 0.4

      PreferForwardCritic:
        enabled: true
        cost_power: 1
        cost_weight: 8.0
        threshold_to_consider: 2.8

      # Obstacle avoidance tuned to your inflation (radius=0.45, scale=4.0); start conservative
      ObstaclesCritic:
        enabled: true
        cost_power: 1
        consider_footprint: true         # set true later if you need tighter checks (more CPU)
        collision_cost: 10000.0
        collision_margin_distance: 0.10
        near_goal_distance: 0.5
        repulsion_weight: 1.1             # lower if you see wobble at cost boundary
        critical_weight: 20.0
        inflation_radius: 0.40            # Humble: match your costmap
        cost_scaling_factor: 4.0          # Humble: match your costmap

      CostCritic:
        enabled: true
        cost_power: 1
        cost_weight: 2.4
        consider_footprint: true
        collision_cost: 1000000.0
        near_goal_distance: 1.0
        critical_cost: 300.0
        trajectory_point_step: 2


local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 10.0
      publish_frequency: 5.0
      global_frame: odom
      robot_base_frame: base_footprint
      use_sim_time: False
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      robot_radius: 0.28
      # plugins: ["manual_obstacles", "voxel_layer", "inflation_layer"]
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 4.0
        inflation_radius: 0.40
      # manual_obstacles:
      #   plugin: "nav2_costmap_2d::StaticLayer"
      #   map_topic: "/manual_obstacles_map"
      #   map_subscribe_transient_local: True
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 1.8
        mark_threshold: 0
        observation_sources: scan scan_bottom # base_camera_points
        scan:
          topic: /scan
          max_obstacle_height: 1.8
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 5.5
          raytrace_min_range: 0.05
          obstacle_max_range: 5.5
          obstacle_min_range: 0.05
        scan_bottom:
          topic: /scan_bottom
          max_obstacle_height: 1.8
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 5.5
          raytrace_min_range: 0.05
          obstacle_max_range: 5.5
          obstacle_min_range: 0.05
        # base_camera_points:
        #   topic: /camera/depth/points
        #   max_obstacle_height: 1.8
        #   min_obstacle_height: 0.2  # to ignore floor noise
        #   clearing: True
        #   marking: True
        #   data_type: "PointCloud2"
        #   expected_update_rate: 0.2
        #   raytrace_max_range: 3.0
        #   raytrace_min_range: 0.4
        #   obstacle_max_range: 3.0
        #   obstacle_min_range: 0.4
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_footprint
      use_sim_time: False
      robot_radius: 0.28
      resolution: 0.05
      track_unknown_space: true
      # plugins: ["static_layer", "manual_obstacles", "obstacle_layer", "inflation_layer"]
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan scan_bottom # base_camera_points
        scan:
          topic: /scan
          max_obstacle_height: 1.8
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 5.5
          raytrace_min_range: 0.05
          obstacle_max_range: 5.5
          obstacle_min_range: 0.05
        scan_bottom:
          topic: /scan_bottom
          max_obstacle_height: 1.8
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 5.5
          raytrace_min_range: 0.05
          obstacle_max_range: 5.5
          obstacle_min_range: 0.05
        # base_camera_points:
        #   topic: /camera/depth/points
        #   max_obstacle_height: 1.8
        #   min_obstacle_height: 0.2  # to ignore floor noise
        #   clearing: True
        #   marking: True
        #   data_type: "PointCloud2"
        #   expected_update_rate: 0.2
        #   raytrace_max_range: 3.0
        #   raytrace_min_range: 0.4
        #   obstacle_max_range: 3.0
        #   obstacle_min_range: 0.4
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_topic: "/map"  # Base map (navigation map)
        map_subscribe_transient_local: True
      # manual_obstacles:
      #   plugin: "nav2_costmap_2d::StaticLayer"
      #   map_topic: "/manual_obstacles_map"
      #   map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 4.0
        inflation_radius: 0.40
      always_send_full_costmap: True

map_server:
  ros__parameters:
    use_sim_time: False
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: ""

map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_smac_planner/SmacPlannerHybrid"
      allow_unknown: true
      tolerance: 0.5
      max_iterations: 1000000
      max_on_approach_iterations: 1000
      max_planning_time: 5.0

      # forward-only kinematics
      motion_model_for_search: "DUBIN"   # <-- no reverse
      angle_quantization_bins: 72
      minimum_turning_radius: 0.35       # MUST be > 0.0 (set to your robot’s true min)

      # gentle biases (reverse_* is ignored in DUBIN)
      change_penalty: 2.0
      non_straight_penalty: 1.2
      cost_penalty: 2.0
      retrospective_penalty: 0.015
      lookup_table_size: 20.0

      # finishers
      analytic_expansion_ratio: 3.5
      analytic_expansion_max_length: 3.0
      analytic_expansion_max_cost: 200.0
      analytic_expansion_max_cost_override: false

      # optional: try this if goals near doorways struggle (still forward-only)
      goal_heading_mode: "BIDIRECTIONAL"

      # keep your downsampling
      downsample_costmap: true
      downsampling_factor: 2

      # smoothing (OK to keep your smoother_server too)
      smooth_path: true
      smoother:
        max_iterations: 1000
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 1.0e-10
        do_refinement: true
        refinement_num: 2

smoother_server:
  ros__parameters:
    use_sim_time: False
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: odom
    robot_base_frame: base_footprint
    transform_tolerance: 0.1
    use_sim_time: False
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: False

waypoint_follower:
  ros__parameters:
    use_sim_time: False
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    use_sim_time: False
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.42, 0.0, 1.0]
    min_velocity: [-0.42, 0.0, -1.0]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0
